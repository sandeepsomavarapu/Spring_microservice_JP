
	Spring overview
	
	Spring Boot 
		
		-->
		Oauth
		junit/mockito
	Microservices	
		
		sync--->
		async--->kafka
		
	docker 
		
	Spring Framework:
	==================
		rod johnson -->2003
		
			6.x
		light weight 
		loosley coupled 		
	
	spring core 
	
		container -->BF,AC life cycle object 
		
		
			CREATION OF OBJECT
			WIRING 
			CONFIGURING
			DESTROYING
	
		CONFIGURATION file
		
			xml config --><beans><bean>
			annotation config-->avoid xml--->@Component/@Service/Repository/Controller
							C  -->Test -->autowiring --@Autowired
							@Scope
							@Value
							@Primary
							@Qualified
			java config
						@Configuration
						@ComponentScan
						
						@Bean
	Note:
	======
	spring has given annotations for user defined classes @Component,......
	
	explicit --->java config
	
		@Bean("")
		public Datasource getDB()
		{
		TomcatDS ds=new TomcatDS();
		
		
		}
		
		
Spring Boot:3.x
============
	it is an extension to the spring framework
	
	
		server-->
		
		spring boot-->17
		
		db
		java
		spring
		jpa
		hibernate....maven
		
		configuration

	production ready apps
														server,datasource....
		1)auto configuration	 --->most of the commonly used classes already configured by SB				
		2)embeded(internal)server -->tomcat,weblogic	,hikari spring boot 1.x-->tomcat
		3)starters   starter parent  1-starter--50-60
		4)actuators  /beans,/metrics,/health,/env,config....
		5)h2 DB(in-built)
	
	
	STS-->spring tool suite-->pivotal
	
	eclipse-->sts extention
	
	
	spring intializer
	
	sts
	
	controller
	
	restcontroller
	

	webservices:
	============
		SOA
		
		phonepe<--->apps
			
			RMI
			EJB
			SP			java<--->java
	
			DCOM		.net<--->.net
			RPC			c/c++<--->c/c++
			CORBA		interoperable
	
					java<--->python
	
	webservices
	
			SOAP-->	XML
			
			REST--> xml,json,pt,html,js
	
	
	web apps
	spring boot app--->rest api
		http urls
		
		rest--->jackson-->JSON
	
		java-->emp
					-->JSON-->jackson
					
	Employee emp=new Employee(123,"suresh",...)
	
		{
		"eid":123,
		"ename":"suresh"
		
		}
	
	
	
	
	DAO
	
	1)add product
	2)update product
	3)delete product
	4)get Product by id 
	5)get all products
	6)get all products between the price
	7)get all products by category
	
	
	Datajpa		-->CrudRepository,JpaRepository
	
	https://stackabuse.com/guide-to-spring-data-jpa/
	
	DSL grammer 
	
	exception handling
			
			controller level eh	-->inside controller
								
			application/global level eh-->
			
			
			@ExceptionHandler
			@ResponseStatus
			
			
			@ControllerAdvice
			
	
	validations :
	
			validation
			MethodArgumentNotValidException
			@Validated
	
	actuators
	
	h2-->database-->inmemory
	
	xml
	
	microservices
	
		
		kafka
		oauth
		junit
		Docker 

https://docs.spring.io/spring-boot/reference/actuator/endpoints.html


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		
		
		h2-console
		
		
		
microservices:
==============		
	Spring cloud	
		
		monolithic architecture 
		
		
		"it says decompose/split/devide our large project into smaller services and later 
		communicate the services"
		
				devide
				communicate
		
		
		
		1)independently scallable
		2)independently deployable
		3)independently developed
		
		
		2 ways
			
				1)sync  		http ,RestTemplate,WebClient,OpenFiegn
				2)async			kafka,activemq,rabbitmq
		
		
		
		microservices 
		
		centralised config  ---->spring cloud
			config server --->git,consul
			
	centralized location
		-->cloud config
				spring cloud config server ---->github

							project--->configserver


	1) github
		repository
			.properties
					COPY COMMON PROPERTIES

	2)new project(configserver)
			2.1) @EnableConfigServer(along with @SpringBootApplication)
			2.2) .properties-->copy git url paste here 
				port :888
Example		 spring.cloud.config.server.git.uri:https://github.com/sandeepsomavarapu/config-server-repo.git	
	
	3)in all micro(config client)open pom.xml add below dependency
		
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		
			
			
		
		service registry,discovery
		circuit  breaker pattern
		distributed tracing
		api gateway

			kafka
			
			oauth2
			
			junit
			
			docker
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
